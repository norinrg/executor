/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef TIMEDEXECUTION_H
#define TIMEDEXECUTION_H

#include <chrono>
#include <functional>
#include <iostream>
#include <queue>
#include <utility>

namespace nrg {

struct TimedExecution {

    using Function = std::function<void()>;

    struct QueueElement {
        std::chrono::high_resolution_clock::time_point when;
        Function what;

        bool operator>(const QueueElement& rhs) const
        {
            return when > rhs.when;
        }
      };

    using Queue = std::priority_queue<QueueElement, std::vector<QueueElement>, std::greater<QueueElement>>;

    static std::chrono::high_resolution_clock::time_point now()
    {
        return std::chrono::high_resolution_clock::now();
    }

    static void push(Queue& queue, QueueElement elem)
    {
        std::cerr <<  "p0\n";
        queue.push(std::move(elem));
    }

    //  no time, fn -> push
    template<typename FN>
    static void push(Queue& queue, FN fn)
    {
        std::cerr <<  "p1\n";
        QueueElement elem = { now(), std::move(fn) };
        push(queue, std::move(elem));
    }

    //  no time, param...
    template<typename FN, typename... Param>
    static void push(Queue& queue, FN fn, Param&&... param)
    {
        std::cerr <<  "p2\n";
        QueueElement elem = { now(), [=]() { fn(param...); } };
        push(queue, std::move(elem));
    }

    // time-point, fn
    template<class Rep2, class Period2, typename FN>
    void operator()(Queue& queue, const std::chrono::time_point<Rep2, Period2>& when, FN fn)
    {
        std::cerr <<  "p3\n";
        QueueElement elem = { when, std::move(fn) };
        push(queue, std::move(elem));
    }

    // delay, fn
    template<class Rep2, class Period2, typename FN>
    void operator()(Queue& queue, const std::chrono::duration<Rep2, Period2>& delay, FN fn)
    {
        std::cerr <<  "p4\n";
        push(queue, now+delay, std::move(fn));
    }

    // time-point, param...
    template<class Rep, class Period, typename FN, typename... Param>
    void operator()(Queue& queue, const std::chrono::time_point<Rep, Period>& when, FN fn, Param&&... param)
    {
        std::cerr <<  "p5\n";
        QueueElement elem = { when, [=]() { fn(param...); } };
        push(queue, std::move(elem));
    }

    // delay, param...
    template<class Rep, class Period, typename FN, typename... Param>
    void operator()(Queue& queue, const std::chrono::duration<Rep, Period>& delay, FN fn, Param&&... param)
    {
        std::cerr <<  "p6\n";
        QueueElement elem = { now() + delay, fn };
        push(queue, now()+delay, std::forward(param)...);
    }

    static bool isEmpty(const Queue& queue)
    {
        return queue.empty();
    }

    static const QueueElement& top(Queue& queue)
    {
        return queue.top();
    }

    static void pop(Queue& queue)
    {
        queue.pop();
    }

    static bool isDue(const QueueElement& elem)
    {
        return elem.when <= now();
    }

    static void execute(const QueueElement& elem)
    {
        elem.what();
    }

    static std::chrono::high_resolution_clock::duration whenIsDue(const QueueElement& elem)
    {
        return elem.when - now();
    }
};


}

#endif
