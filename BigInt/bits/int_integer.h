/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

// from https://isocpp.org/files/papers/n4038.html

#ifndef INT_INTEGER_H
#define INT_INTEGER_H

#include <string>

namespace std { namespace experimental { namespace seminumeric
{
    class bits;
    class integer_data_proxy;

    class integer
    {
    public:

        // constructors
        integer() noexcept;

        template <class Ty>
            integer(Ty rhs) noexcept; // arithmetic types only

        integer(std::initializer_list<uint_least32_t> init);

        template <class CharT, class Traits, class Alloc>
            explicit integer(const std::basic_string<CharT, Traits, Alloc>& str);

        explicit integer(const bits& rhs);
        explicit integer(bits&& rhs);

        integer(const integer& rhs);
        integer(integer&& rhs) noexcept;

        // assign and swap
        template <class Ty>
            integer& operator=(Ty rhs);   // arithmetic types only
        integer& operator=(const bits& rhs);
        integer& operator=(bits&& rhs);
        integer& operator=(const integer& rhs);
        integer& operator=(integer&& rhs);
        void swap(integer& rhs) noexcept;

        // conversions
        explicit operator long long() const;
        explicit operator unsigned long long() const;
        explicit operator long double() const noexcept;
        explicit operator bool() const noexcept;

        // comparisons
        int compare(const integer& rhs) const noexcept;

        // arithmetic operations
        integer& operator+=(const integer& rhs);
        integer& operator-=(const integer& rhs);
        integer& operator*=(const integer& rhs);
        integer& operator/=(const integer& rhs);
        integer& operator%=(const integer& rhs);

        integer& operator++();
        integer operator++(int);
        integer& operator--();
        integer operator--(int);

        integer div(const integer& rhs);

        integer& abs() noexcept;
        integer& negate() noexcept;
        integer operator+() const noexcept;
        integer operator-() const noexcept;

        integer& operator<<=(size_t rhs);
        integer& operator>>=(size_t rhs);

        // numeric operations
        integer& sqr();
        integer& sqrt();
        integer& pow(const integer& exp);
        integer& mod(const integer& rhs);
        integer& mulmod(const integer& rhs, const integer& m);
        integer& powmod(const integer& exp, const integer& m);

        // observers
        bool is_zero() const noexcept;
        bool is_odd() const noexcept;

        // accessors
        integer_data_proxy get_data_proxy();

        // capacity
        size_t size() const noexcept;
        size_t capacity() const noexcept;
        void reserve(size_t digits);
        void shrink_to_fit();
    };

}}}

#endif
